package server

type Person struct {
	Name string
}

templ headerComponent() {
	<header
		class="prose max-w-none text-xl dark:prose-invert text-blue-500 pb-4 my-4 px-4 sm:px-0 sm:mx-4 flex flex-row gap-4 min-w-80 border-b-2 border-blue-200 overflow-hidden"
	>
		<a class="hidden sm:block font-bold flex-grow min-w-fit m:text-blue-500 sm:underline" href="/">
			Welcome to InterinGo language
		</a>
		<a class="sm:hidden flex-grow min-w-fit overflow-hidden text-blue-500 sm:underline" href="/">
			Home
		</a>
		<a class="text-blue-500 sm:underline flex-shrink" href="/docs">Docs</a>
		<a
			class="text-blue-500 sm:underline flex-shrink"
			href="https://github.com/nghiango1/hello/tree/main/go/interpreter"
		>Source</a>
	</header>
}

templ shortinfoComponent() {
	<div class="sm:flex sm:items-center">
		<img
			class="rounded-full hidden sm:block sm:w-28 sm:h-28"
			src="https://avatars.githubusercontent.com/u/31164703?s=400&u=19b089be1581b00a69f9b0890ec97e8d5e86f83f&v=4"
			alt="@nghiango1"
		/>
		<div class="max-h-80 sm:px-4">
			<h2 class="font-bold mb-0">Nghia Ngo</h2>
			<p class="max-w-48">Actually have 10 year of codding experience</p>
			<a class="text-blue-500 underline" href="https://github.com/nghiango1">Github</a>
			<a class="text-blue-500 underline" href="https://www.linkedin.com/in/nghia-ngo-duc">Linkedin</a>
			<a class="text-blue-500 underline" href="/info">Resume</a>
		</div>
	</div>
}

templ footerComponent() {
	<footer
		class="prose max-w-none dark:prose-invert pt-2 sm:pt-8 flex flex-col sm:flex-row-reverse gap-4 border-t-blue-200 border-t-2"
	>
		<div class="flex flex-col sm:text-right sm:ml-auto">
			<h2 class="font-bold">Menu</h2>
			<a class="text-blue-500 underline" href="/">home</a>
			<a class="text-blue-500 underline" href="/info">about</a>
			<a class="text-blue-500 underline" href="/404">404</a>
		</div>
		@shortinfoComponent()
	</footer>
}

// HTML barebone page template
templ pageLayout() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta http-equiv="X-UA-Compatible" content="ie=edge"/>
			<title>InterinGo language</title>
			<link rel="stylesheet" href="/assets/stylesheet.css"/>
			<link rel="icon" href="./favicon.ico" type="image/x-icon"/>
			<script src="/assets/htmx.min.js"></script>
			<script src="/assets/custom.js"></script>
		</head>
		<body class="min-w-80 scrollbar dark:bg-[#050510]">
			@headerComponent()
			{ children... }
		</body>
	</html>
}

templ mainwraper() {
	<main class="p-4 flex flex-col gap-4 max-w-3xl sm:mx-8 md:mx-auto xl:max-w-full xl:mx-8 ">
		{ children... }
	</main>
}

// Output component that used for rendering REPL output being sent
// from the server
templ outputComponent() {
	<div class="rounded-t-lg border-blue-500 dark:border-white border-2 overflow-hidden">
		<input id="hiddenwrap" class="hidden peer/wrap" type="checkbox" name="wrap"/>
		<input id="hiddenhide" class="hidden peer/hide" type="checkbox" name="hide"/>
		<div class="flex gap-2 p-1 bg-blue-200 dark:bg-[#090d1a] border-b-2">
			<h2 class="block m-auto flex-1 whitespace-nowrap overflow-clip">Command-prompt window </h2>
			<input id="wrap" class="peer/wrap m-auto" type="checkbox" name="wrap" oninput="updateWrap(); scrollBottom();"/>
			<label
				for="wrap"
				class="flex flex-row gap-2 object-none m-auto rounded-lg peer-checked/wrap:font-bold peer-checked:bg-gray-200"
			>
				Wrap
			</label>
			<input
				id="stick"
				class="peer/stick m-auto"
				type="checkbox"
				name="hide"
				oninput="updateStick();"
				checked="true"
			/>
			<label
				for="stick"
				class="flex flex-row gap-2 m-auto rounded-lg peer-checked/stick:font-bold peer-checked:bg-gray-200"
			>
				Stick
			</label>
			<input id="hide" class="peer/hide m-auto" type="checkbox" name="hide" oninput="updateHide(); scrollBottom();"/>
			<label
				for="hide"
				class="flex flex-row gap-2 m-auto rounded-lg peer-checked/hide:font-bold peer-checked:bg-gray-200"
			>
				Hide
			</label>
		</div>
		<pre
			id="repl-output"
			class="resize-y outline-blue-200 p-2 rounded-lg h-56 whitespace-pre peer-checked/hide:hidden peer-checked/wrap:whitespace-pre-wrap flex overflow-auto scrollbar"
			hx-on:htmx:after-swap="scrollBottom()"
		>
			Let start with help() command { "\n" }
		</pre>
		<pre
			id="repl-result"
			class="hidden peer-checked/hide:block px-2 max-h-6 overflow-auto"
			hx-on:htmx:after-swap="copyEvalResult();scrollBottom();"
		></pre>
	</div>
}

// Input component that user can use in UI to enter InterinGo code
// - input `repl-input` contain the code line
// - Button that used for sending user input code to server
// which then being evaluated and update REPLOutputComponent
// TODO: Using a better UI component with REACT?
templ inputComponent() {
	<form
		class="flex flex-row gap-4 outline-blue-200 dark:outline-white h-fit"
		hx-post="/api/evaluate"
		hx-target="#repl-result"
		hx-swap="innerHTML"
		hx-on:htmx:config-request="addCommand()"
	>
		<p class="hidden sm:block sm:my-auto">Custom command:</p>
		<input
			class="flex-1 font-mono my-auto focus:outline-none border-b border-gray-500 bg-transparent pl-2"
			type="text"
			name="repl-input"
			aria-autocomplete="both"
			aria-labelledby="docsearch-label"
			id="repl-input"
			autocomplete="off"
			autocorrect="off"
			autocapitalize="off"
			enterkeyhint="go"
			spellcheck="false"
			placeholder="help()"
		/>
		<button
			class="block my-auto rounded-lg bg-blue-200 border-2 active:bg-blue-200 activate:dark:bg-blue-900 dark:bg-[#090d1a] p-1"
			id="repl-send"
			type="Summit"
			click="addCommand()"
		>
			Run
		</button>
	</form>
}

templ evaluateComponent() {
	<div
		class="sticky top-4 flex flex-col gap-1 after:absolute after:-top-2 after:-inset-2 after:bg-white/30 after:dark:bg-[#050510]/30 after:object-none after:blur-sm after:-z-10 before:-z-10 after:rounded-b-lg before:rounded-b-lg before:backdrop-blur-sm before:absolute before:-top-4 before:-inset-4 before:bg-white/30 before:dark:bg-[#050510]/30 before:object-none dark:text-[#d1d5db]"
	>
		@outputComponent()
		@inputComponent()
	</div>
}

templ exampleCodeComponent(name string, code string) {
	<div class="flex flex-col">
		<div class="flex flex-row">
			<p class="block my-auto flex-1">Snippet - <code>{ name }</code></p>
			<button
				class="block my-auto rounded-lg underline"
				name={ name }
				onClick="clearEvalResult(); copyCode(this.name);"
			>
				Copy and Run
			</button>
		</div>
		<pre id={ name }>{ code }</pre>
	</div>
}

// Fragement - A fragment can be use for HTMX swap - which isn't need fullpage reload
templ exampleArticalFragment() {
	<article class="prose max-w-none dark:prose-invert">
		<h1>InterinGo </h1>
		<p>
			"interprester-in-go" or InterinGo (for short) is a new interpreter language by <a
	href="https://www.linkedin.com/in/nghia-ngo-duc"
>me</a> to chalenge my self with more advanged topics. The
			command-prompt window is the directed way to interact with InterinGo REPL, which have been broughted to web so
			you can try it now without the need to download any binary.
		</p>
		<p>
			To make sure you not get lost with how to use the language, here is a sample craft code to try out in REPL
			command prompt. Click on Click and run to copy the code into Command prompt and have REPL run the code. The
			input box will reflect the code being used, while the command prompt will show the evaluation result.
		</p>
		@exampleCodeComponent("Comparation", "1 > 2")
		<p>
			As you see, the output will be <code>false</code> because 1 is less than 2. Also, the command-prompt can be
			annoy in smaller screen, try using Hide checkbox to minimize it, don't be too worry, it still show evaluation
			result in minimized state (or uncheck sticky box eh... wanna use that?).
		</p>
		<h2>Examples</h2>
		<p>
			Of course, these examples isn't all of what InterinGo can do, but this home page is just for showing InterinGo
			REPL to the world, let have some readding in <a href="/docs">document</a> to learning more about it. The online
			online REPL won't be there thought, so let head on and downloading REPL build file <a
	href="https://github.com/nghiango1/hello/releases"
>here </a>
		</p>
		@exampleCodeComponent("Complex calculation", "4 * (4 / 2) * (3 + 2) + 1")
		@exampleCodeComponent("Control flow", "if (1 > 2) { return 10 } else { return 3 }")
		@exampleCodeComponent("Variable", "let x = 2 * 2 * 2; return x;")
		<q>
			Also, current REPL session is shared with only one backend, so we can reuse our variables even the page is
			reload. With above code, we currently have <code>x = 8</code>
		</q>
		@exampleCodeComponent("Function", `let add = fn (x,y) { x + y }; return add(4,x);`)
		<p>Error throwing is here too</p>
		@exampleCodeComponent("Error", "let x = 2/0")
		<p>In-case use didn't see the input box placeholder just yet, try this too</p>
		@exampleCodeComponent("Built-in command", "help()")
	</article>
}

templ HomeFragment() {
	<div class="flex flex-col gap-4 xl:flex-row xl:gap-8">
		<input type="checkbox" id="hiddenstick" class="hidden peer/hiddenstick" checked="true"/>
		<div class="block xl:w-5/12 peer-checked/hiddenstick:sticky peer-checked/hiddenstick:top-4">
			@evaluateComponent()
		</div>
		<div class="flex-1">
			@exampleArticalFragment()
		</div>
	</div>
}

templ renderLinked(path string, key string, linked *Linked) {
	if len(linked.docs) == 0 {
		for key := range linked.nestedLink {
			@renderLinked(path+"/"+key, key, linked.nestedLink[key])
		}
	} else {
		<ol class="block list-disc ">
			if key == "docs" {
				<div class="flex flex-row items-end py-4">
					<h1 class="flex-1 block font-bold text-xl dark:text-white">Documentation</h1>
					<button class="block md:hidden" onclick="linkedHide()">
						Hide menu
					</button>
				</div>
			} else {
				<h2 class="font-bold my-4">{ key }</h2>
			}
			for _, item := range linked.docs {
				<li
					class="block pl-4 py-2 hover:font-bold hover:border-blue-500 focus:font-bold border-l-2 focus:border-blue-500 border-gray-200"
				>
					<a href={ templ.URL(path + "/" + item) }>{ item }</a>
				</li>
			}
			for key := range linked.nestedLink {
				@renderLinked(path+"/"+key, key, linked.nestedLink[key])
			}
		</ol>
	}
}

templ LinkedComponent(linked *Linked) {
	<input id="linked" class="hidden peer m-auto" type="checkbox" name="checked"/>
	<label
		for="linked"
		class="block md:hidden peer-checked:hidden focus:font-bold sticky top-16 p-1 rounded-r-lg bg-gray-200 dark:bg-gray-500 focus:bg-blue-500 active:bg-blue-500 dark:text-white vertical-lr"
	>
		Show menu
	</label>
	<div
		class="h-full hidden px-4 w-[19rem] peer-checked:block md:block sticky top-4 dark:text-white before:-z-10 before:rounded-b-lg before:backdrop-blur-lg before:absolute before:-top-4 before:-inset-0 before:bg-white/30 before:dark:bg-[#050510]/30 before:object-none"
	>
		@renderLinked("", "Contents", linked)
	</div>
}

templ DocsFragment(docs string, linked *Linked) {
	<div class="grid md:grid-cols-docs grid-cols-1 px-8 ">
		<div class="fixed z-20 md:static top-0 left-0 bottom-0 overflow-y-auto">
			@LinkedComponent(linked)
		</div>
		<div class="overflow-auto">
			<article class="prose dark:prose-invert w-full max-w-none mb-6">
				@templ.Raw(docs)
			</article>
			@footerComponent()
		</div>
	</div>
}

templ InfoFragment(info string) {
	<article class="prose dark:prose-invert m-auto">
		@templ.Raw(info)
	</article>
}

templ Home() {
	@pageLayout() {
		@mainwraper() {
			@HomeFragment()
			@footerComponent()
		}
	}
}

templ Docs(docs string, linked *Linked) {
	@pageLayout() {
		@DocsFragment(docs, linked)
	}
}

templ Info(info string) {
	@pageLayout() {
		@mainwraper() {
			@InfoFragment(info)
			@footerComponent()
		}
	}
}

templ NotFound() {
	@pageLayout() {
		@mainwraper() {
			<article class="prose dark:prose-invert m-auto">
				<div>404 NOT FOUND PAGE</div>
			</article>
			@footerComponent()
		}
	}
}
